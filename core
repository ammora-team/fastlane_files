def bitrise_env (var_name, value)
  envman = `which envman`
  unless (envman.empty?)
    sh("envman", "add", "--key", var_name, "--value", value)
  end
end

lane :gpg_decrypt do |options|
  file = options[:file]
  extension = file[-4..-1]
  output = file
  split = output.split("->")
  isGpg = false

  if (split.length > 2)
    UI.user_error!("Invalid file.")
  end

  if (split.length === 2)
    output = split[1].strip
    file = split[0].strip
    isGpg = true
  elsif (extension == '.gpg')
    isGpg = true
    output = output[0..-5]
  end

  if (!isGpg)
    return output
  end

  passphrase = options[:passphrase]
  gpg_cmd = `which gpg`

  if (gpg_cmd.empty?)
    UI.user_error!("'gpg' command not found")
  else
    Dir.chdir ".." do
      sh("gpg",  "--batch", "--yes", "--passphrase", passphrase , "--output", output, "--decrypt", file, log: false)
    end
    UI.success "GPG Decrypt OK"
  end

  output
end

platform :android do
   private_lane :generate_json_key do
    if (ENV.key?('SUPPLY_JSON_KEY'))
      json_key = gpg_decrypt( file: ENV['SUPPLY_JSON_KEY'], passphrase: ENV['GPG_PASSPHRASE'] )
    end
  end

  private_lane :store do |options|
    json_key = generate_json_key
    unless json_key
      UI.user_error!("Generate json_key.")
    end

    defaultOptions = {
      package_name: ENV['APP_IDENTIFIER'],
      track: 'alpha',
      json_key: json_key,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    }

    upload_to_play_store(defaultOptions.merge!(options))
  end

  lane :generate_jks do
    output = ''
    if (ENV.key?('KEYSTORE_FILE'))
      output = gpg_decrypt( file: ENV['KEYSTORE_FILE'], passphrase: ENV['GPG_PASSPHRASE'] )
    end
  end

  lane :generate_google_services do
    # todo check file exists
    if (ENV.key?('GOOGLE_SERVICES_JSON'))
      gpg_decrypt( file: ENV['GOOGLE_SERVICES_JSON'], passphrase: ENV['GPG_PASSPHRASE'] )
    end
  end

  lane :version do |options|
    properties = {}

    version = options[:version] ? options[:version] : ENV['APP_VERSION']
    unless version.nil?
      properties[:versionName] = options[:version]
    end

    unless options[:build_number].nil?
      properties[:versionCode] = options[:build_number]
    end

    options[:properties] = properties
    
    options
  end

  lane :prepare do |options|
    requirements
    generate_google_services
    options[:keystore_file] = generate_jks

    # after prepare
    after_android_prepare(options)
  end

  lane :build do |options|
    # prepare generate google services check install
    prepare(options)
    options = build_artifact(options)

    bitrise_env('BITRISE_DEPLOY_DIR', './deploy')

    # after build
    after_android_build(options)

    options
  end

  lane :dev do |options|
    ENV['LANE_ENV'] = 'dev'
    options[:env] = 'dev'

    before_android_dev(options)

    options = version(options)

    options = build(options)

    after_android_dev(options)
  end

  lane :staging do |options|
    ENV['LANE_ENV'] = 'staging'
    options[:env] = 'staging'

    before_android_staging(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    store(options)

    after_android_staging(options)
  end

  lane :prod do |options|
    ENV['LANE_ENV'] = 'prod'
    options[:env] = 'prod'

    unless options[:track]
      options[:track] = 'beta'
    end

    before_android_prod(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    store(options)

    after_android_prod(options)
  end
end

platform :ios do
  lane :generate_google_services do
    if (ENV.key?('GOOGLE_SERVICES_PLIST'))
      gpg_decrypt( file: ENV['GOOGLE_SERVICES_PLIST'], passphrase: ENV['GPG_PASSPHRASE'] )
    end
  end

  lane :version do |options|
    if (ENV['APP_XCODEPROJ'].empty?)
      UI.user_error!("'xcodeproj' is required to version")
    end

    version = options[:version] ? options[:version] : ENV['APP_VERSION']
    unless version.nil?
      increment_version_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        version_number: version
      )
    elseif options[:version_bump].nil?
      increment_version_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        bump_type: options[:version_bump]
      )
    end

    unless options[:build_number].nil?
      increment_build_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        build_number: options[:build_number]
      )
    end
  end

  lane :certificate do |options|
    if (ENV.key?('MATCH_TYPE'))
      type = ENV['MATCH_TYPE']
    end

    if (options[:type])
      type = options[:type]
    end

    readonly = ENV['MATCH_READONLY']
    password = ENV['FASTLANE_PASSWORD']
    if (readonly.nil? && (password.nil? || password.empty?))
      readonly = true
    end

    username = ENV['MATCH_USERNAME'] ? ENV['MATCH_USERNAME'] : ENV['FASTLANE_USER']
    if (!username.empty?)
      match(
        username: username,
        app_identifier: ENV['APP_IDENTIFIER'],
        readonly: readonly,
        type: type
      )
    end
  end

  lane :certificates do
    certificate( type: "development" )
    certificate( type: "appstore" )
  end

  lane :prepare do |options|
    requirements
    generate_google_services

    skip_certificates = options[:skip_certificates] ? options[:skip_certificates] : ENV['MATCH_SKIP_CERTIFICATES']
    if (!skip_certificates)
      certificates(options)
    end

    # after prepare
    after_ios_prepare(options)
  end

  lane :build do |options|
    # prepare generate google services check install
    prepare(options)
    options = build_artifact(options)

    bitrise_env('BITRISE_DEPLOY_DIR', './deploy')

    # after build
    after_ios_build(options)

    options
  end

  lane :dev do |options|
    ENV['LANE_ENV'] = 'dev'
    options[:env] = 'dev'

    before_ios_dev(options)

    version(options)

    options = build(options)

    after_ios_dev(options)
  end

  lane :staging do |options|
    ENV['LANE_ENV'] = 'staging'
    options[:env] = 'staging'

    before_ios_staging(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    username = ENV['DELIVER_USER'] ? ENV['DELIVER_USER'] : ENV['FASTLANE_USER']

    defaultOptions = {
      username: username,
      app_identifier: ENV['APP_IDENTIFIER'],
      skip_submission: true
    }

    upload_to_testflight(defaultOptions.merge!(options))

    after_ios_staging(options)
  end

  lane :prod do |options|
    ENV['LANE_ENV'] = 'prod'
    options[:env] = 'prod'

    before_ios_prod(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    username = ENV['DELIVER_USER'] ? ENV['DELIVER_USER'] : ENV['FASTLANE_USER']

    defaultOptions = {
      username: username,
      app_identifier: ENV['APP_IDENTIFIER'],
      skip_metadata: true,
      skip_screenshots: true
    }

    upload_to_app_store(defaultOptions.merge!(options))

    after_ios_prod(options)
  end
end

lane :after_ios_prepare do
  UI.success "hook after_ios_prepare"
end

lane :after_ios_build do
  UI.success "hook after_ios_builds"
end

lane :after_ios_dev do
  UI.success "hook after_ios_dev"
end

lane :after_ios_staging do
  UI.success "hook after_ios_staging"
end

lane :after_ios_prod do
  UI.success "hook after_ios_prod"
end

lane :before_ios_dev do
  UI.success "hook before_ios_dev"
end

lane :before_ios_staging do
  UI.success "hook before_ios_staging"
end

lane :before_ios_prod do
  UI.success "hook before_ios_prod"
end

lane :after_android_prepare do
  UI.success "hook after_ios_prepare"
end

lane :after_android_build do
  UI.success "hook after_ios_builds"
end

lane :after_android_dev do
  UI.success "hook after_ios_dev"
end

lane :after_android_staging do
  UI.success "hook after_ios_staging"
end

lane :after_android_prod do
  UI.success "hook after_ios_prod"
end

lane :before_android_dev do
  UI.success "hook before_ios_dev"
end

lane :before_android_staging do
  UI.success "hook before_ios_staging"
end

lane :before_android_prod do
  UI.success "hook before_ios_prod"
end