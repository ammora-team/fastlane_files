def ios_archive (options)
  return xcode_archive(options)
end

def xcode_archive (options)
  buildOptions = {}
  if (ENV.key?('APP_SCHEME'))
    buildOptions[:scheme] = ENV['APP_SCHEME']
  end

  if (ENV.key?('APP_XCWORKSPACE'))
    buildOptions[:workspace] = ENV['APP_XCWORKSPACE']
  end

  if (ENV.key?('APP_XCODEPROJ'))
    buildOptions[:project] = ENV['APP_XCODEPROJ']
  end

  buildOptions[:export_method] = 'development'
  buildOptions[:configuration] = 'Debug'
  buildOptions[:output_directory] = output_path

  if (options[:env] === 'staging' || options[:env] === 'prod')
    buildOptions[:export_method] = 'app-store'
    buildOptions[:configuration] = 'Release'
  end

  build_app(buildOptions)

  options.merge!(buildOptions)
end

platform :ios do
  lane :generate_google_services do
    if (ENV.key?('GOOGLE_SERVICES_PLIST'))
      gpg_decrypt( file: ENV['GOOGLE_SERVICES_PLIST'], passphrase: ENV['GPG_PASSPHRASE'] )
    end
  end

  lane :version do |options|
    project = options[:project] ? options[:project] : ENV['APP_XCODEPROJ']
    version = options[:version] ? options[:version] : ENV['APP_VERSION']

    if (project.empty?)
      return
    end

    unless version.nil?
      increment_version_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        version_number: version
      )
    elseif options[:version_bump].nil?
      increment_version_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        bump_type: options[:version_bump]
      )
    end

    unless options[:build_number].nil?
      increment_build_number(
        xcodeproj: ENV['APP_XCODEPROJ'],
        build_number: options[:build_number]
      )
    end
  end

  lane :certificate do |options|
    if (ENV.key?('MATCH_TYPE'))
      type = ENV['MATCH_TYPE']
    end

    if (options[:type])
      type = options[:type]
    end

    readonly = ENV['MATCH_READONLY']
    password = ENV['FASTLANE_PASSWORD']
    if (readonly.nil? && (password.nil? || password.empty?))
      readonly = true
    end

    username = ENV['MATCH_USERNAME'] ? ENV['MATCH_USERNAME'] : ENV['FASTLANE_USER']
    if (!username.empty?)
      match(
        username: username,
        app_identifier: ENV['APP_IDENTIFIER'],
        readonly: readonly,
        type: type
      )
    end
  end

  lane :certificates do
    certificate( type: "development" )
    certificate( type: "appstore" )
  end

  lane :prepare do |options|
    before_ios_prepare(options)

    requirements(options)
    generate_google_services

    skip_certificates = options[:skip_certificates] ? options[:skip_certificates] : ENV['MATCH_SKIP_CERTIFICATES']
    if (!skip_certificates)
      certificates(options)
    end

    # after prepare
    after_ios_prepare(options)
  end

  lane :build do |options|
    # prepare generate google services check install
    prepare(options)

    begin
        options = ios_archive_override(options)
    rescue
        options = ios_archive(options)
    end

    bitrise_env('BITRISE_DEPLOY_DIR', output_path())

    # after build
    after_ios_build(options)

    options
  end

  lane :dev do |options|
    ENV['LANE_ENV'] = 'dev'
    options[:env] = 'dev'

    before_ios_dev(options)

    version(options)

    options = build(options)

    after_ios_dev(options)
  end

  lane :staging do |options|
    ENV['LANE_ENV'] = 'staging'
    options[:env] = 'staging'

    before_ios_staging(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    username = ENV['DELIVER_USER'] ? ENV['DELIVER_USER'] : ENV['FASTLANE_USER']

    defaultOptions = {
      username: username,
      app_identifier: ENV['APP_IDENTIFIER'],
      skip_submission: true
    }

    upload_to_testflight(defaultOptions.merge!(options))

    after_ios_staging(options)
  end

  lane :prod do |options|
    ENV['LANE_ENV'] = 'prod'
    options[:env] = 'prod'

    before_ios_prod(options)

    version(options)

    unless options[:skip_build]
      options = build(options)
    end

    username = ENV['DELIVER_USER'] ? ENV['DELIVER_USER'] : ENV['FASTLANE_USER']

    defaultOptions = {
      username: username,
      app_identifier: ENV['APP_IDENTIFIER'],
      skip_metadata: true,
      skip_screenshots: true
    }

    upload_to_app_store(defaultOptions.merge!(options))

    after_ios_prod(options)
  end
end

lane :before_ios_prepare do |options|
  UI.success "hook before_ios_prepare"
end

lane :after_ios_prepare do |options|
  UI.success "hook after_ios_prepare"
end

lane :after_ios_build do |options|
  UI.success "hook after_ios_builds"
end

lane :after_ios_dev do |options|
  UI.success "hook after_ios_dev"
end

lane :after_ios_staging do |options|
  UI.success "hook after_ios_staging"
end

lane :after_ios_prod do |options|
  UI.success "hook after_ios_prod"
end

lane :before_ios_dev do |options|
  UI.success "hook before_ios_dev"
end

lane :before_ios_staging do |options|
  UI.success "hook before_ios_staging"
end

lane :before_ios_prod do |options|
  UI.success "hook before_ios_prod"
end
